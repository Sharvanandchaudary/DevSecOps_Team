Kubernetes Cluster Setup for GitHub Actions Runners – Walkthrough
Overview
This guide explains how to set up a Kubernetes cluster and deploy self‑hosted GitHub Actions runners on it using the actions-runner-controller.
Once completed, your workflows can run on your own scalable runners in Kubernetes.

1. Prerequisites
A GitHub repository or organization.

kubectl installed and configured.

helm installed.

A cloud environment (AWS, GCP, Azure) or local Minikube.

A GitHub App or Personal Access Token (PAT) with appropriate permissions.

2. Create a Kubernetes Cluster
Option A: Cloud-managed cluster (recommended)
Example with AWS EKS:

sh
Copy
Edit
eksctl create cluster --name gha-runners-cluster --region us-east-1 \
  --nodegroup-name gha-nodes --nodes 3 --nodes-min 3 --nodes-max 6
Option B: Local testing with Minikube:

sh
Copy
Edit
minikube start --cpus 4 --memory 8192
Verify nodes:

sh
Copy
Edit
kubectl get nodes
3. Install Actions Runner Controller
Add the Helm repository:

sh
Copy
Edit
helm repo add actions-runner-controller https://actions-runner-controller.github.io/actions-runner-controller
helm repo update
Create a namespace:

sh
Copy
Edit
kubectl create namespace actions-runner-system
Install the controller:

sh
Copy
Edit
helm upgrade --install actions-runner-controller actions-runner-controller/actions-runner-controller \
  --namespace actions-runner-system
4. Configure GitHub Authentication
Recommended: Use a GitHub App.

Go to GitHub → Settings → Developer Settings → GitHub Apps → New GitHub App.

Grant Read & Write on Actions and Repository Administration.

Generate a private key and note the App ID and Installation ID.

Create a Kubernetes secret:

sh
Copy
Edit
kubectl create secret generic controller-manager \
  -n actions-runner-system \
  --from-literal=github_app_id=<APP_ID> \
  --from-literal=github_app_installation_id=<INSTALLATION_ID> \
  --from-file=github_app_private_key=<PRIVATE_KEY.pem>
5. Deploy the Runner
Create a file named gha-runner-deployment.yaml:

yaml
Copy
Edit
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: gha-runner
  namespace: actions-runner-system
spec:
  replicas: 3
  template:
    spec:
      repository: <your-github-org-or-user>/<your-repo>
      labels:
        - self-hosted
        - k8s
Apply the file:

sh
Copy
Edit
kubectl apply -f gha-runner-deployment.yaml
6. Verify Runners
Check pod status:

sh
Copy
Edit
kubectl get pods -n actions-runner-system
You should see pods in Running state.

Go to GitHub → your repository → Settings → Actions → Runners → Self-hosted.
The runners should appear online.

7. Scale Runners
To scale up or down:

sh
Copy
Edit
kubectl scale runnerdeployment gha-runner -n actions-runner-system --replicas=5
8. Maintenance and Updates
Update the controller:

sh
Copy
Edit
helm upgrade actions-runner-controller actions-runner-controller/actions-runner-controller -n actions-runner-system
Check controller logs if issues arise:

sh
Copy
Edit
kubectl logs -n actions-runner-system deployment/actions-runner-controller
9. Best Practices
Use GitHub App authentication instead of PAT.

Apply network policies and limit RBAC permissions in actions-runner-system.

Regularly update cluster nodes and controller Helm chart.

Tag runners with labels and use them in your workflow runs-on: field.

You’re all set!
You now have a Kubernetes cluster hosting GitHub Actions runners that you can scale as needed.

If you want, I can also provide:

Example workflow YAML that uses these runners,

A full Helm values.yaml with recommended settings,

Or advanced setups (Autoscaling, Spot nodes, etc.).

Just let me know!









Ask ChatGPT
You said:
ALL GITHUB RUNNERDS NEED GTO BER RUN ON CLUSTER'


ChatGPT said:
Here is a clear final documentation walkthrough assuming all GitHub Actions runners in your environment must run on a Kubernetes cluster.
You can share this as an internal guide.

Run All GitHub Actions Runners on Kubernetes Cluster – Walkthrough
Objective
This document describes how to ensure every GitHub Actions workflow in your organization uses self‑hosted runners that run inside a Kubernetes cluster.
By the end, all runners are managed by the cluster — no standalone VMs or other environments.

1. Why Run All Runners on Kubernetes?
Centralized management of runners.

Horizontal scaling with Kubernetes (kubectl scale or HPA).

Easier upgrades and maintenance (via Helm).

Secure network isolation and RBAC.

2. Prerequisites
Admin access to a Kubernetes cluster (cloud or on‑prem).

kubectl and helm installed locally.

GitHub App or PAT with permission to register runners for your repo or organization.

3. Kubernetes Cluster Setup
You need at least one cluster with enough nodes to handle workflow workloads.

Example – EKS:

sh
Copy
Edit
eksctl create cluster --name gha-runners --region us-east-1 \
  --nodegroup-name gha-nodes --nodes 3 --nodes-min 3 --nodes-max 6
Verify:

sh
Copy
Edit
kubectl get nodes
Ensure all nodes are Ready.

4. Install Actions Runner Controller in the Cluster
Add Helm repo:

sh
Copy
Edit
helm repo add actions-runner-controller https://actions-runner-controller.github.io/actions-runner-controller
helm repo update
Create namespace:

sh
Copy
Edit
kubectl create namespace actions-runner-system
Install controller:

sh
Copy
Edit
helm upgrade --install actions-runner-controller actions-runner-controller/actions-runner-controller \
  --namespace actions-runner-system
5. Authenticate with GitHub
Create a GitHub App:

GitHub → Settings → Developer Settings → GitHub Apps → New GitHub App.

Permissions: Read & Write for Actions and Repository Hooks.

Install the app on your organization or repo.

Download the private key and note App ID and Installation ID.

Create secret in Kubernetes:

sh
Copy
Edit
kubectl create secret generic controller-manager \
  -n actions-runner-system \
  --from-literal=github_app_id=<APP_ID> \
  --from-literal=github_app_installation_id=<INSTALLATION_ID> \
  --from-file=github_app_private_key=<PRIVATE_KEY.pem>
6. Deploy Runner Deployments (for All Workflows)
For each repository or organization that needs runners, create a RunnerDeployment object in Kubernetes.
Example (gha-runner-deployment.yaml):

yaml
Copy
Edit
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: gha-runner
  namespace: actions-runner-system
spec:
  replicas: 3
  template:
    spec:
      repository: your-org/your-repo
      labels:
        - self-hosted
        - k8s
Apply:

sh
Copy
Edit
kubectl apply -f gha-runner-deployment.yaml
Repeat with different repository: fields for other repos if needed.

7. Verify All Runners Are Cluster-Based
After applying, check:

sh
Copy
Edit
kubectl get pods -n actions-runner-system
All pods should be Running.

On GitHub → Repository → Settings → Actions → Runners → Self-hosted
All visible runners should match labels from your Kubernetes setup (self-hosted, k8s).

Important: Remove any old non‑cluster runners from your repos/org to enforce that only cluster‑based runners remain.

8. Update Workflow Files
In every .github/workflows/*.yml file, update runs-on: to use your cluster runner labels:

yaml
Copy
Edit
runs-on: [self-hosted, k8s]
This forces workflows to always target the cluster‑based runners.

9. Scaling and Maintenance
Scale runners:

sh
Copy
Edit
kubectl scale runnerdeployment gha-runner -n actions-runner-system --replicas=10
Upgrade controller:

sh
Copy
Edit
helm upgrade actions-runner-controller actions-runner-controller/actions-runner-controller -n actions-runner-system
Monitor:

sh
Copy
Edit
kubectl logs -n actions-runner-system deployment/actions-runner-controller
10. Enforce Policy (Optional but Recommended)
Remove all previous VM-based or machine-based runners from GitHub Settings.

Lock down runner groups so only cluster-managed runner groups are available.

Audit runs-on: usage in workflows to ensure compliance.

Final Checklist
✅ Kubernetes cluster created and healthy
✅ Actions Runner Controller installed and running
✅ GitHub App credentials stored in Kubernetes
✅ RunnerDeployment objects applied for all repositories
✅ Old non‑cluster runners removed
✅ All workflows updated with runs-on: [self-hosted, k8s]

Now all GitHub Actions runners are running inside your Kubernetes cluster.

If you want, I can also provide:

Sample RunnerDeployment for multiple repos,

Helm values.yaml with autoscaling,

Or a CI/CD workflow template using these runners.

Just let me know!








You said:
HOW TO MANEGE THIS CLUSTE RCLEARE 


ChatGPT said:
Here’s a clear management guide for your Kubernetes cluster that runs all GitHub Actions runners.
You can keep this as a “Cluster Management Cheat Sheet” for your team.

Managing the Kubernetes Cluster for GitHub Actions Runners
Once you set up the cluster and deploy your runners, you need to operate, scale, monitor, and maintain it.
Below are the key management areas with commands and best practices.

1. Cluster Access and Context
Ensure kubectl is configured for your cluster:

sh
Copy
Edit
kubectl config get-contexts
kubectl config use-context <your-cluster-context>
Verify access:

sh
Copy
Edit
kubectl get nodes
kubectl get pods -A
2. Managing Runner Pods
All runners are in the actions-runner-system namespace.

View runner pods
sh
Copy
Edit
kubectl get pods -n actions-runner-system
Check logs of a runner pod
sh
Copy
Edit
kubectl logs <pod-name> -n actions-runner-system
Restart a runner pod
sh
Copy
Edit
kubectl delete pod <pod-name> -n actions-runner-system
# The controller will recreate it automatically
3. Scaling Runners
Each runner set is defined in a RunnerDeployment object.

Scale up or down:
sh
Copy
Edit
kubectl scale runnerdeployment gha-runner -n actions-runner-system --replicas=5
Edit replicas dynamically:
sh
Copy
Edit
kubectl edit runnerdeployment gha-runner -n actions-runner-system
4. Adding New Runners (for new repos)
Create another RunnerDeployment YAML:

yaml
Copy
Edit
apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerDeployment
metadata:
  name: gha-runner-new
  namespace: actions-runner-system
spec:
  replicas: 2
  template:
    spec:
      repository: your-org/another-repo
      labels:
        - self-hosted
        - k8s
Apply:

sh
Copy
Edit
kubectl apply -f gha-runner-new.yaml
5. Monitoring and Health Checks
View controller logs:

sh
Copy
Edit
kubectl logs deployment/actions-runner-controller -n actions-runner-system
Watch pod status:

sh
Copy
Edit
kubectl get pods -n actions-runner-system -w
For cluster-wide health:

sh
Copy
Edit
kubectl get nodes
kubectl top nodes
kubectl top pods -n actions-runner-system
6. Updating the Runner Controller
When a new version of actions-runner-controller is released:

sh
Copy
Edit
helm repo update
helm upgrade actions-runner-controller actions-runner-controller/actions-runner-controller -n actions-runner-system
7. Backup and Disaster Recovery
Keep a backup of:

RunnerDeployment YAML files in Git (source of truth).

GitHub App credentials (App ID, Installation ID, PEM file).

If cluster is lost, recreate cluster → reapply RunnerDeployment manifests → runners come back online.

8. Security and RBAC
Limit access to actions-runner-system namespace.

Use separate runner groups if different teams need isolation.

Regularly rotate GitHub App private keys and update the Kubernetes secret:

sh
Copy
Edit
kubectl create secret generic controller-manager \
  --from-literal=github_app_id=<APP_ID> \
  --from-literal=github_app_installation_id=<INSTALLATION_ID> \
  --from-file=github_app_private_key=<PRIVATE_KEY.pem> \
  -n actions-runner-system --dry-run=client -o yaml | kubectl apply -f -
9. Troubleshooting Common Issues
Issue	Command/Action
Pod stuck in Pending	kubectl describe pod <name> to check node resources or taints.
Runner not appearing in GitHub	Check controller logs and GitHub App credentials.
Workflow stuck on Waiting for a runner	Verify runs-on: labels match runner labels.
High workload	Scale replicas or add nodes to cluster.

10. Ongoing Management Checklist
✅ Monitor pods and nodes regularly
✅ Scale RunnerDeployment objects as workloads grow
✅ Update Helm chart periodically
✅ Rotate secrets and credentials periodically
✅ Keep YAML configs in Git for easy redeployment
✅ Remove old/unneeded RunnerDeployments to save resources

With these steps, you can fully manage your Kubernetes cluster that runs all your GitHub Actions runners.

If you want, I can also draft:

A day‑to‑day operations SOP,

A sample GitOps repo structure for runner manifests,

Or automation scripts to scale runners based on load.

Let me know!








