‚úÖ Final Updated Script (create_rhel86_r6i8xlarge.sh)
bash
Copy
Edit
#!/bin/bash
set -e

# ===== CONFIG =====
SEC_GROUP="testing-rhel-sg"
KEY_NAME="testingRHELtestvm"          # <-- keypair name registered in OpenStack
KEY_FILE="testing-rhel-testvm.pem"    # <-- your saved PEM file
VM_NAME="testvm"
PORT_NAME="tn02-${VM_NAME}-port"
NETWORK_ID="3eb39e89-ac62-4b5b-a313-8d52482cc1f2"
SUBNET_ID="e5db0db9-bf93-43f4-928a-e46e099fef9e"
FLOATING_SUBNET_ID="e33be8b2-02e2-41a5-87b5-830ba5d0db7a"
FLAVOR="r6i.8xlarge"
IMAGE_ID="07ba4847-245e-401c-aff0-65a4124ceef2"   # rhel86-new image ID
# ===== CONFIG =====

echo "=== Step 1: Create security group allowing SSH (22) ==="
if ! openstack security group list -f value -c Name | grep -q "^${SEC_GROUP}$"; then
  openstack security group create $SEC_GROUP --description "Allow SSH"
  openstack security group rule create --proto tcp --dst-port 22 $SEC_GROUP
  echo "Security group $SEC_GROUP created with SSH access."
else
  echo "Security group $SEC_GROUP already exists."
fi

echo "=== Step 2: Verify keypair exists ==="
if ! openstack keypair list -f value -c Name | grep -q "^${KEY_NAME}$"; then
  echo "Keypair $KEY_NAME does not exist in OpenStack!"
  echo "Please create it first:"
  echo "openstack keypair create $KEY_NAME > $KEY_FILE"
  exit 1
else
  echo "Keypair $KEY_NAME found in OpenStack."
fi

echo "=== Step 3: Create port in TN02 network ==="
PORT_ID=$(openstack port create \
  --network $NETWORK_ID \
  --fixed-ip subnet=$SUBNET_ID \
  --enable $PORT_NAME -f json | jq -r '.id')
echo "Created port: $PORT_ID"

echo "=== Step 4: Assign security group to port ==="
openstack port set \
  --security-group $SEC_GROUP \
  $PORT_ID
echo "Security group $SEC_GROUP applied to port $PORT_ID"

echo "=== Step 5: Create and associate floating IP ==="
FLOATING_IP_JSON=$(openstack floating ip create -f json --subnet $FLOATING_SUBNET_ID --port $PORT_ID)
FLOATING_IP=$(echo $FLOATING_IP_JSON | jq -r '.floating_ip_address')
echo "Floating IP created and associated: $FLOATING_IP"

echo "=== Step 6: Launch server ==="
openstack server create \
  --flavor $FLAVOR \
  --image $IMAGE_ID \
  --port $PORT_ID \
  --key-name $KEY_NAME \
  --security-group $SEC_GROUP \
  --wait $VM_NAME
echo "Server $VM_NAME created successfully."

echo "=== Step 7: Verify placement ==="
HOST=$(openstack server show $VM_NAME -f value -c OS-EXT-SRV-ATTR:host)
echo "VM $VM_NAME is running on host: $HOST"

echo "=== Step 8: SSH command ==="
echo "Use this to connect:"
echo "ssh -i $KEY_FILE cloud-user@$FLOATING_IP"
üöÄ How to run
Save this as create_rhel86_r6i8xlarge.sh:

bash
Copy
Edit
nano create_rhel86_r6i8xlarge.sh
# paste the script
CTRL+O, Enter, CTRL+X
Make it executable:

bash
Copy
Edit
chmod +x create_rhel86_r6i8xlarge.sh
Run it:

bash
Copy
Edit
./create_rhel86_r6i8xlarge.sh
‚úÖ After successful creation:
SSH into your VM:

bash
Copy
Edit
ssh -i testing-rhel-testvm.pem cloud-user@<Floating_IP_output_from_script>
If you‚Äôd like, I can also add logic to delete the port and floating IP automatically if server creation fails.
Let me know! ‚úÖüî•









Ask ChatGPT
naan

























‚úÖ 1. Convert your commands into a loop
You can loop through numbers (e.g. 01 to 10) and run the same steps for each VM.
Below is a bash script that will create 10 VMs by repeating the port, volume, and server creation with unique names.

‚úÖ 2. Example script to create 10 VMs
Save as create_10_vms.sh (or run directly in your shell):

bash
Copy
Edit
#!/bin/bash

# Loop through 1 to 10
for i in $(seq -w 1 10); do
  echo "===== Creating VM $i ====="

  # Create port
  port_id=$(openstack port create \
    --network 3eb39e89-ac62-4b5b-a313-8d52482cc1f2 \
    --fixed-ip subnet=e5db0db9-bf93-43f4-928a-e46e099fef9e \
    --enable test-lowmem-port-$i -f json | jq -r '.id')
  echo "Created port: $port_id"

  # Set security groups
  openstack port set \
    --security-group b3455868-8842-4b16-9f35-684e25f25f28 \
    --security-group 1320ddfd-e090-4300-8d9c-c0d10dfaf84b \
    --security-group c741134d-43d3-4419-bb55-ba6e60bead75 \
    --security-group 58269c3b-bd2d-4287-aedc-2e2f2c744c19 \
    $port_id

  # Create floating IP
  openstack floating ip create -f json \
    --subnet e33be8b2-02e2-41a5-87b5-830ba5d0db7a \
    --port $port_id pro-net-vlan1162 > /dev/null
  echo "Floating IP created for VM $i"

  # Create bootable volume
  volume_id=$(openstack volume create -f json \
    --snapshot e355ab4b-a2f5-4a25-a0c8-2523816c9678 \
    --size 125 \
    --bootable test-lowmem-vol-$i | jq -r '.id')
  echo "Created volume: $volume_id"

  # Wait for volume to be available
  while true; do
    status=$(openstack volume show $volume_id -f value -c status)
    if [ "$status" = "available" ]; then
      break
    else
      echo "Waiting for volume $volume_id to become available..."
      sleep 5
    fi
  done

  # Create server
  openstack server create \
    --flavor c2m4 \
    --volume $volume_id \
    --security-group b3455868-8842-4b16-9f35-684e25f25f28 \
    --security-group 1320ddfd-e090-4300-8d9c-c0d10dfaf84b \
    --security-group c741134d-43d3-4419-bb55-ba6e60bead75 \
    --security-group 58269c3b-bd2d-4287-aedc-2e2f2c744c19 \
    --port $port_id \
    --key-name c30-drm-keypair \
    --wait test-lowmem-vm-$i

  echo "‚úÖ VM $i created successfully"
done
‚úÖ 3. Make the script executable and run
bash
Copy
Edit
chmod +x create_10_vms.sh
./create_10_vms.sh
üîß Notes
Each VM, port, and volume is uniquely named with -$i (e.g. test-lowmem-vm-01, test-lowmem-vm-02, ‚Ä¶ test-lowmem-vm-10).

This script assumes the same network, subnet, snapshot, and flavor for all.

Adjust m1.large instead of c2m4 if you want high‚Äëmem VMs.

‚úÖ 4. Verify hosts for all
After creation, you can loop through them to check placement:

bash
Copy
Edit
for i in $(seq -w 1 10); do
  echo "VM $i host:"
  openstack server show test-lowmem-vm-$i -f value -c OS-EXT-SRV-ATTR:host
done
If you‚Äôd like, I can help you add parallel creation or export logs of each VM.
Let me know if you want me to tweak this script for your exact environment! üöÄ






‚úÖ Script: create_10_highmem_vms.sh
bash
Copy
Edit
#!/bin/bash

# Loop through 1 to 10
for i in $(seq -w 1 10); do
  echo "===== Creating HIGHMEM VM $i ====="

  # Create port
  port_id=$(openstack port create \
    --network 3eb39e89-ac62-4b5b-a313-8d52482cc1f2 \
    --fixed-ip subnet=e5db0db9-bf93-43f4-928a-e46e099fef9e \
    --enable test-highmem-port-$i -f json | jq -r '.id')
  echo "Created port: $port_id"

  # Set security groups
  openstack port set \
    --security-group b3455868-8842-4b16-9f35-684e25f25f28 \
    --security-group 1320ddfd-e090-4300-8d9c-c0d10dfaf84b \
    --security-group c741134d-43d3-4419-bb55-ba6e60bead75 \
    --security-group 58269c3b-bd2d-4287-aedc-2e2f2c744c19 \
    $port_id

  # Create and associate floating IP
  openstack floating ip create -f json \
    --subnet e33be8b2-02e2-41a5-87b5-830ba5d0db7a \
    --port $port_id pro-net-vlan1162 > /dev/null
  echo "Floating IP created for VM $i"

  # Create bootable volume from snapshot
  volume_id=$(openstack volume create -f json \
    --snapshot e355ab4b-a2f5-4a25-a0c8-2523816c9678 \
    --size 125 \
    --bootable test-highmem-vol-$i | jq -r '.id')
  echo "Created volume: $volume_id"

  # Wait for volume to be available
  while true; do
    status=$(openstack volume show $volume_id -f value -c status)
    if [ "$status" = "available" ]; then
      break
    else
      echo "Waiting for volume $volume_id to become available..."
      sleep 5
    fi
  done

  # Create server using high-memory flavor
  openstack server create \
    --flavor m1.large \
    --volume $volume_id \
    --security-group b3455868-8842-4b16-9f35-684e25f25f28 \
    --security-group 1320ddfd-e090-4300-8d9c-c0d10dfaf84b \
    --security-group c741134d-43d3-4419-bb55-ba6e60bead75 \
    --security-group 58269c3b-bd2d-4287-aedc-2e2f2c744c19 \
    --port $port_id \
    --key-name c30-drm-keypair \
    --wait test-highmem-vm-$i

  echo "‚úÖ Highmem VM $i created successfully"
done
‚úÖ How to run
Save the script as create_10_highmem_vms.sh:

bash
Copy
Edit
chmod +x create_10_highmem_vms.sh
./create_10_highmem_vms.sh
‚úÖ How to verify host placement
After the script finishes:


Summary:
‚úîÔ∏è This script creates 10 high‚Äëmemory VMs (m1.large).
‚úîÔ∏è You already have a separate script for 10 low‚Äëmemory VMs (c2m4).
‚úîÔ∏è Both sets will be uniquely named and placed on their respective aggregates.

If you want, I can also combine both into a single script or add logging. Let me know! üöÄ



volume c30-to-test-to-01-haproxy-volume
ID
60b80fac-0dd2-4c4e-a0dd-f161c7bb1b4a

openstack flavor create m8g.xlarge --vcpus 8 --ram 32768 --disk 100
openstack flavor set m8g.xlarge --property aggregate_instance_extra_specs:host_type=gpu_host
+--------------------------------------+---------------------+---------+------+-----------+-------+-----------+
vsaravan@sjcvl-ghrunner1:~$ openstack flavor show m8g.xlarge
+----------------------------+-----------------------------------------------------+
| Field                      | Value                                               |
+----------------------------+-----------------------------------------------------+
| OS-FLV-DISABLED:disabled   | False                                               |
| OS-FLV-EXT-DATA:ephemeral  | 0                                                   |
| access_project_ids         | None                                                |
| description                | None                                                |
| disk                       | 100                                                 |
| id                         | cf5037d3-f8ea-48fd-89a9-31f241633c33                |
| name                       | m8g.xlarge                                          |
| os-flavor-access:is_public | True                                                |
| properties                 | aggregate_instance_extra_specs:host_type='gpu_host' |
| ram                        | 32768                                               |
| rxtx_factor                | 1.0                                                 |
| swap                       | 0                                                   |
| vcpus                      | 8                                                   |
+----------------------------+-----------------------------------------------------+
vsaravan@sjcvl-ghrunner1:~$

so create a script use above values for secutiyr groups ann all but the update the image name and flavor name 




#!/bin/bash
set -e

# Existing bootable volume you want to use
VOLUME_ID="60b80fac-0dd2-4c4e-a0dd-f161c7bb1b4a"

# Loop through 1 to 2
for i in $(seq -w 1 2); do
  echo "===== Creating GPU VM $i ====="

  # Create a new port for this VM
  port_id=$(openstack port create \
    --network 3eb39e89-ac62-4b5b-a313-8d52482cc1f2 \
    --fixed-ip subnet=e5db0db9-bf93-43f4-928a-e46e099fef9e \
    --enable test-gpu-port-$i -f json | jq -r '.id')
  echo "Created port: $port_id"

  # Apply security groups to the port
  openstack port set \
    --security-group b3455868-8842-4b16-9f35-684e25f25f28 \
    --security-group 1320ddfd-e090-4300-8d9c-c0d10dfaf84b \
    --security-group c741134d-43d3-4419-bb55-ba6e60bead75 \
    --security-group 58269c3b-bd2d-4287-aedc-2e2f2c744c19 \
    $port_id

  # Create and associate a floating IP
  openstack floating ip create -f json \
    --subnet e33be8b2-02e2-41a5-87b5-830ba5d0db7a \
    --port $port_id pro-net-vlan1162 > /dev/null
  echo "Floating IP created for GPU VM $i"

  # Create server using GPU flavor and existing volume
  openstack server create \
    --flavor m8g.xlarge \
    --volume $VOLUME_ID \
    --security-group b3455868-8842-4b16-9f35-684e25f25f28 \
    --security-group 1320ddfd-e090-4300-8d9c-c0d10dfaf84b \
    --security-group c741134d-43d3-4419-bb55-ba6e60bead75 \
    --security-group 58269c3b-bd2d-4287-aedc-2e2f2c744c19 \
    --port $port_id \
    --key-name c30-drm-keypair \
    --wait test-gpu-vm-$i

  echo "‚úÖ GPU VM $i created successfully"
done







‚úÖ Script: create_gpu_vms.sh
bash
Copy
Edit
#!/bin/bash
set -e

# ===== CONFIG =====
COUNT=2   # how many GPU VMs you want
FLAVOR_ID="cf5037d3-f8ea-48fd-89a9-31f241633c33"        # m8g.xlarge
IMAGE_ID="a2474995-b4f9-45b4-a2d9-48217b5c521e"          # your base image
NETWORK_ID="3eb39e89-ac62-4b5b-a313-8d52482cc1f2"        # tn02 network
SUBNET_ID="e5db0db9-bf93-43f4-928a-e46e099fef9e"
FLOATING_SUBNET="e33be8b2-02e2-41a5-87b5-830ba5d0db7a"  # floating ip subnet
SECURITY_GROUPS=(
  "b3455868-8842-4b16-9f35-684e25f25f28"
  "1320ddfd-e090-4300-8d9c-c0d10dfaf84b"
  "c741134d-43d3-4419-bb55-ba6e60bead75"
  "58269c3b-bd2d-4287-aedc-2e2f2c744c19"
)
KEY_NAME="c30-drm-keypair"
VOLUME_SIZE=100 # size in GB

# ===== LOOP =====
for i in $(seq -w 1 $COUNT); do
  echo "===== Creating GPU VM $i ====="

  # Create port
  PORT_NAME="gpu-port-$i"
  port_id=$(openstack port create \
    --network $NETWORK_ID \
    --fixed-ip subnet=$SUBNET_ID \
    --enable $PORT_NAME -f json | jq -r '.id')
  echo "‚úÖ Created port: $port_id"

  # Attach security groups to port
  for sg in "${SECURITY_GROUPS[@]}"; do
    openstack port set --security-group $sg $port_id
  done

  # Create floating IP
  openstack floating ip create -f json \
    --subnet $FLOATING_SUBNET \
    --port $port_id pro-net-vlan1162 > /dev/null
  echo "‚úÖ Floating IP created for GPU VM $i"

  # Create new bootable volume from image
  VOL_NAME="gpu-vol-$i"
  volume_id=$(openstack volume create -f json \
    --size $VOLUME_SIZE \
    --bootable \
    --image $IMAGE_ID \
    $VOL_NAME | jq -r '.id')
  echo "‚úÖ Created volume: $volume_id"

  # Wait for volume to be available
  while true; do
    status=$(openstack volume show $volume_id -f value -c status)
    if [ "$status" = "available" ]; then
      echo "‚úÖ Volume $volume_id is available."
      break
    else
      echo "‚è≥ Waiting for volume $volume_id..."
      sleep 5
    fi
  done

  # Create server
  VM_NAME="gpu-vm-$i"
  openstack server create \
    --flavor $FLAVOR_ID \
    --volume $volume_id \
    $(for sg in "${SECURITY_GROUPS[@]}"; do echo --security-group $sg; done) \
    --port $port_id \
    --key-name $KEY_NAME \
    --wait $VM_NAME

  echo "üéâ GPU VM $i ($VM_NAME) created successfully!"
done
üìå How to use
Save as create_gpu_vms.sh.

Make it executable:

bash
Copy
Edit
chmod +x create_gpu_vms.sh
Run:

bash
Copy
Edit
./create_gpu_vms.sh






‚úÖ Script: create_gpu_vms.sh
bash
Copy
Edit
#!/bin/bash
set -e

# ===== CONFIG =====
COUNT=2   # how many GPU VMs you want
FLAVOR_ID="cf5037d3-f8ea-48fd-89a9-31f241633c33"        # m8g.xlarge
IMAGE_ID="a2474995-b4f9-45b4-a2d9-48217b5c521e"          # your base image
NETWORK_ID="3eb39e89-ac62-4b5b-a313-8d52482cc1f2"        # tn02 network
SUBNET_ID="e5db0db9-bf93-43f4-928a-e46e099fef9e"
FLOATING_SUBNET="e33be8b2-02e2-41a5-87b5-830ba5d0db7a"  # floating ip subnet
SECURITY_GROUPS=(
  "b3455868-8842-4b16-9f35-684e25f25f28"
  "1320ddfd-e090-4300-8d9c-c0d10dfaf84b"
  "c741134d-43d3-4419-bb55-ba6e60bead75"
  "58269c3b-bd2d-4287-aedc-2e2f2c744c19"
)
KEY_NAME="c30-drm-keypair"
VOLUME_SIZE=100 # size in GB

# ===== LOOP =====
for i in $(seq -w 1 $COUNT); do
  echo "===== Creating GPU VM $i ====="

  # Create port
  PORT_NAME="gpu-port-$i"
  port_id=$(openstack port create \
    --network $NETWORK_ID \
    --fixed-ip subnet=$SUBNET_ID \
    --enable $PORT_NAME -f json | jq -r '.id')
  echo "‚úÖ Created port: $port_id"

  # Attach security groups to port
  for sg in "${SECURITY_GROUPS[@]}"; do
    openstack port set --security-group $sg $port_id
  done

  # Create floating IP
  openstack floating ip create -f json \
    --subnet $FLOATING_SUBNET \
    --port $port_id pro-net-vlan1162 > /dev/null
  echo "‚úÖ Floating IP created for GPU VM $i"

  # Create new bootable volume from image
  VOL_NAME="gpu-vol-$i"
  volume_id=$(openstack volume create -f json \
    --size $VOLUME_SIZE \
    --bootable \
    --image $IMAGE_ID \
    $VOL_NAME | jq -r '.id')
  echo "‚úÖ Created volume: $volume_id"

  # Wait for volume to be available
  while true; do
    status=$(openstack volume show $volume_id -f value -c status)
    if [ "$status" = "available" ]; then
      echo "‚úÖ Volume $volume_id is available."
      break
    else
      echo "‚è≥ Waiting for volume $volume_id..."
      sleep 5
    fi
  done

  # Create server
  VM_NAME="gpu-vm-$i"
  openstack server create \
    --flavor $FLAVOR_ID \
    --volume $volume_id \
    $(for sg in "${SECURITY_GROUPS[@]}"; do echo --security-group $sg; done) \
    --port $port_id \
    --key-name $KEY_NAME \
    --wait $VM_NAME

  echo "üéâ GPU VM $i ($VM_NAME) created successfully!"
done
üìå How to use
Save as create_gpu_vms.sh.

Make it executable:

bash
Copy
Edit
chmod +x create_gpu_vms.sh
Run:

bash
Copy
Edit
./create_gpu_vms.sh
