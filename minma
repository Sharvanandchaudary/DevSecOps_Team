CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/add_chamber
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41-sensitive.tfvars.json
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41.tfvars.json
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/terragrunt.hcl

if [ -z "$aws_cc_chamber" ] || [ -z "$os_chamber" ]; then
    echo "ERROR: One or both chamber values are missing!"
    exit 1
fi



jobs:
  pre_chamber_deployment:
    runs-on: cloud30-docker-mvp
    steps:
      - name: Setup Git Credentials
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
        with:
          credentials: ${{ secrets.GIT_CREDENTIALS }}

      - name: Checkout cadence-cloud-OpenStack repo
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: ./terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: main

      # ⬇️ 1. Download previous SHA artifact (optional, only if you uploaded before)
      - name: Download previous SHA artifact
        uses: actions/download-artifact@v3
        with:
          name: os_sha_file
          path: ./terraform-cadencecld-openstack
        continue-on-error: true

      # ⬇️ 2. Capture or reuse SHA
      - name: Capture or reuse OS SHA
        id: capture_os_sha
        run: |
          cd terraform-cadencecld-openstack
          if [ -f "./os_sha.txt" ]; then
            old_sha=$(cat ./os_sha.txt)
            echo "Reusing existing SHA: $old_sha"
            echo "sha=$old_sha" >> $GITHUB_OUTPUT
          else
            current_sha=$(git rev-parse HEAD)
            echo "Captured new SHA: $current_sha"
            echo "sha=$current_sha" >> $GITHUB_OUTPUT
            echo "$current_sha" > os_sha.txt
          fi

      # ⬇️ (later steps can now use steps.capture_os_sha.outputs.sha)
      - name: Generate changed files pinned to captured SHA
        id: generate_cc_changed_files
        run: |
          cd terraform-cadencecld-openstack
          git fetch origin
          git diff --name-only ${{ steps.capture_os_sha.outputs.sha }} > changed_files.txt
          # etc…


- name: Save SHA artifact
  uses: actions/upload-artifact@v3
  with:
    name: os_sha_file
    path: ./terraform-cadencecld-openstack/os_sha.txt



- name: Check existing OS SHA
  id: check_existing_sha
  run: |
    if [ -f "./terraform-cadencecld-openstack/os_sha.txt" ]; then
      existing_sha=$(cat ./terraform-cadencecld-openstack/os_sha.txt)
      echo "Found existing SHA: $existing_sha"
      echo "sha=$existing_sha" >> $GITHUB_OUTPUT
    else
      echo "sha=" >> $GITHUB_OUTPUT
    fi


- name: Capture or reuse OS SHA
  id: capture_os_sha
  run: |
    if [ -n "${{ steps.check_existing_sha.outputs.sha }}" ]; then
      echo "Reusing existing SHA: ${{ steps.check_existing_sha.outputs.sha }}"
      echo "sha=${{ steps.check_existing_sha.outputs.sha }}" >> $GITHUB_OUTPUT
    else
      cd terraform-cadencecld-openstack
      current_sha=$(git rev-parse HEAD)
      echo "No previous SHA found. Capturing new SHA: $current_sha"
      echo "sha=$current_sha" >> $GITHUB_OUTPUT
      # Save it for reuse in reruns
      echo "$current_sha" > os_sha.txt
    fi






jobs:
  pre_chamber_deployment:
    runs-on: cloud30-docker-mvp
    outputs:
      rname: ${{ steps.step1.outputs.ccid }}
      cc_chamber_chdir: ${{ steps.step2.outputs.cc_chamber_path }}
      cc_changed_files: ${{ steps.step2.outputs.cc_added_files }}
      env_name: ${{ steps.step2.outputs.en_name }}
      cc_id: ${{ steps.step1.outputs.cc_chamber_id }}
      commit_sha: ${{ steps.commit_sha.outputs.sha }}
      os_sha: ${{ steps.capture_os_sha.outputs.sha }}
      os_chamber: ${{ steps.generate_cc_changed_files.outputs.os_chamber }}
      cc_chamber_id: ${{ steps.step1.outputs.cc_chamber_id }}

    steps:
      # ----- AWS repo checkout -----
      - name: Checkout AWS repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }}

      - name: Output AWS SHA
        id: commit_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      # Debug Runner Info...
      - name: Debug Runner Info
        run: |
          echo "==== RUNNER INFO (pre_chamber_deployment) ===="
          echo "Runner Name: $RUNNER_NAME"
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Arch: $RUNNER_ARCH"
          echo "AWS Commit SHA: ${{ github.sha }}"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Concurrency Group: deploy-${GITHUB_SHA}"

      # ----- Checkout shared action files -----
      - name: Checkout shared action files
        uses: actions/checkout@v3
        with:
          repository: IT/OnCloud_IaC_Github_Actions
          path: ./OnCloud_IaC_Github_Actions
          token: ${{ secrets.REPO_TOKEN }}

      - name: Setup Git Credentials
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
        with:
          credentials: ${{ secrets.GIT_CREDENTIALS }}

      # ----- OpenStack repo checkout -----
      - name: Checkout OpenStack TF repo
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: ./terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: Release_test

      # ✅ (A) Try to download previously saved SHA
      - name: Download saved SHA artifact
        id: download_sha
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: openstack-sha
          path: ./  # will place os_sha.txt here

      # ✅ (B) Decide whether to use existing SHA or capture new
      - name: Determine OpenStack SHA
        id: capture_os_sha
        run: |
          if [ -f os_sha.txt ]; then
            echo "Found saved SHA artifact, using it..."
            SHA=$(cat os_sha.txt)
          else
            echo "No saved SHA artifact, capturing new..."
            cd terraform-cadencecld-openstack
            SHA=$(git rev-parse HEAD)
          fi
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Captured OpenStack SHA: $SHA"
          echo "==== DEBUG GIT LOG HEAD ===="
          cd terraform-cadencecld-openstack && git log -n 3 --oneline

      # ✅ (C) Upload SHA artifact for future reruns
      - name: Save SHA artifact
        uses: actions/upload-artifact@v3
        with:
          name: openstack-sha
          path: os_sha.txt
        run: echo "${{ steps.capture_os_sha.outputs.sha }}" > os_sha.txt

      # ----- Simulate delay (sleep) -----
      - name: Simulate delay
        run: |
          echo "Sleeping 120 seconds to simulate overlap..."
          sleep 120

      # ----- Debug: confirm SHA after sleep -----
      - name: Debug OpenStack SHA after sleep
        run: |
          cd terraform-cadencecld-openstack
          echo "Current HEAD SHA: $(git rev-parse HEAD)"
          echo "Expected pinned SHA: ${{ steps.capture_os_sha.outputs.sha }}"

      # ----- Restore cache -----
      - name: Restore changed files cache
        id: cache-cc-changed-files
        uses: actions/cache@v3
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      - name: Debug cache status
        run: |
          echo "Cache hit: ${{ steps.cache-cc-changed-files.outputs.cache-hit }}"

      # ----- Generate changed files pinned to captured SHA -----
      - name: Generate changed files pinned to captured SHA
        id: generate_cc_changed_files
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        run: |
          cd terraform-cadencecld-openstack
          echo "Generating diff from pinned SHA ${{ steps.capture_os_sha.outputs.sha }}"
          git fetch origin ${{ steps.capture_os_sha.outputs.sha }}
          git diff --name-only ${{ steps.capture_os_sha.outputs.sha }}~1 ${{ steps.capture_os_sha.outputs.sha }} > changed_files.txt
          echo "==== DEBUG changed_files.txt ===="
          cat changed_files.txt
          os_chamber=$(grep -oE 'tn[0-9]+' changed_files.txt | head -n1 || true)
          echo "os_chamber=$os_chamber" >> $GITHUB_OUTPUT
          list=$(cat changed_files.txt | tr '\n' ',')
          echo "added=$list" >> $GITHUB_ENV

      # ----- Save cache -----
      - name: Save changed files cache
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      # ----- Debug final outputs -----
      - name: Debug final outputs
        run: |
          echo "Captured OpenStack SHA (os_sha): ${{ steps.capture_os_sha.outputs.sha }}"
          echo "os_chamber detected: ${{ steps.generate_cc_changed_files.outputs.os_chamber }}"








  openstack_chamber_deployment:
    runs-on: cloud30-docker-mvp
    needs: [ pre_chamber_deployment, aws_chamber_deployment ]
    if: ${{ needs.pre_chamber_deployment.outputs.rname == 'mvp-cc' }}
    steps:
      - name: Checkout OpenStack repo pinned to SHA
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: ${{ needs.pre_chamber_deployment.outputs.os_sha }}

      - name: Debug OpenStack checkout
        run: |
          echo "==== DEBUG: OpenStack Checkout ===="
          cd terraform-cadencecld-openstack
          echo "Current HEAD SHA after checkout:"
          git rev-parse HEAD
          echo "Expected SHA from pre_chamber_deployment:"
          echo "${{ needs.pre_chamber_deployment.outputs.os_sha }}"
          echo "Last 3 commits in repo:"
          git log -3 --oneline


add








    - name: Checkout the files
      uses: actions/checkout@v3
      with:
        repository: IT/terraform-cadencecld-openstack
        path: ./terraform-cadencecld-openstack
        token: ${{ secrets.REPO_TOKEN }} 
        fetch-depth: 0    
        ref: ${{ needs.pre_chamber_deployment.outputs.capture_os_sha }} 



Run actions/checkout@v3
Syncing repository: IT/terraform-***cld-openstack
Getting Git version info
Copying '/ghrunner/.gitconfig' to '/gh-runner/_work/_temp/4977d108-37cd-4e1d-b5bb-d1a0948d40c7/.gitconfig'
Temporarily overriding HOME='/gh-runner/_work/_temp/4977d108-37cd-4e1d-b5bb-d1a0948d40c7' before making global git config changes
Adding repository directory to the temporary git global config as a safe directory
/usr/bin/git config --global --add safe.directory /gh-runner/_work/terraform-cloud30v2-aws/terraform-cloud30v2-aws/terraform-***cld-openstack
Initializing the repository
Disabling automatic garbage collection
Setting up auth
Determining the *** branch
Fetching the repository
Determining the checkout info
Checking out the ref
  /usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
  Switched to a new branch 'main'
  branch 'main' set up to track 'origin/main'.
/usr/bin/git log -1 --format='%H'
'31cc3ce87da4ea70d8e2965415223d1d30346172'














jobs:
  pre_chamber_deployment:
    runs-on: cloud30-docker-mvp
    outputs:
      rname: ${{ steps.step1.outputs.ccid }}
      cc_chamber_chdir: ${{ steps.step2.outputs.cc_chamber_path }}
      cc_changed_files: ${{ steps.step2.outputs.cc_added_files }}
      env_name: ${{ steps.step2.outputs.en_name }}
      cc_id: ${{ steps.step1.outputs.cc_chamber_id }}
      commit_sha: ${{ steps.commit_sha.outputs.sha }}
      os_sha: ${{ steps.capture_os_sha.outputs.sha }}
      os_chamber: ${{ steps.generate_cc_changed_files.outputs.os_chamber }}
      cc_chamber_id: ${{ steps.step1.outputs.cc_chamber_id }}

    steps:
      # ----- AWS repo checkout -----
      - name: Checkout AWS repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }}

      - name: Output AWS SHA
        id: commit_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      # ----- Debug: Runner info -----
      - name: Debug Runner Info
        run: |
          echo "==== RUNNER INFO (pre_chamber_deployment) ===="
          echo "Runner Name: $RUNNER_NAME"
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Arch: $RUNNER_ARCH"
          echo "AWS Commit SHA: ${{ github.sha }}"
          echo "Run ID: $GITHUB_RUN_ID"
          echo "Concurrency Group: deploy-${GITHUB_SHA}"

      # ----- Checkout shared action files -----
      - name: Checkout shared action files
        uses: actions/checkout@v3
        with:
          repository: IT/OnCloud_IaC_Github_Actions
          path: ./OnCloud_IaC_Github_Actions
          token: ${{ secrets.REPO_TOKEN }}

      - name: Setup Git Credentials
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
        with:
          credentials: ${{ secrets.GIT_CREDENTIALS }}

      # ----- OpenStack repo checkout -----
      - name: Checkout OpenStack TF repo
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: ./terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: Release_test

      # ----- Capture OpenStack SHA -----
      - name: Capture OpenStack SHA
        id: capture_os_sha
        run: |
          cd terraform-cadencecld-openstack
          current_sha=$(git rev-parse HEAD)
          echo "sha=$current_sha" >> $GITHUB_OUTPUT
          echo "Captured OpenStack SHA: $current_sha"
          echo "==== DEBUG GIT LOG HEAD ===="
          git log -n 3 --oneline

      # ----- Simulate delay (sleep) -----
      - name: Simulate delay
        run: |
          echo "Sleeping 120 seconds to simulate overlap..."
          sleep 120

      # ----- Debug: confirm SHA after sleep -----
      - name: Debug OpenStack SHA after sleep
        run: |
          cd terraform-cadencecld-openstack
          echo "Current HEAD SHA: $(git rev-parse HEAD)"
          echo "Expected pinned SHA: ${{ steps.capture_os_sha.outputs.sha }}"

      # ----- Restore cache -----
      - name: Restore changed files cache
        id: cache-cc-changed-files
        uses: actions/cache@v3
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      - name: Debug cache status
        run: |
          echo "Cache hit: ${{ steps.cache-cc-changed-files.outputs.cache-hit }}"

      # ----- Generate changed files (pinned SHA) -----
      - name: Generate changed files pinned to captured SHA
        id: generate_cc_changed_files
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        run: |
          cd terraform-cadencecld-openstack
          echo "Generating diff from pinned SHA ${{ steps.capture_os_sha.outputs.sha }}"
          git fetch origin ${{ steps.capture_os_sha.outputs.sha }}
          git diff --name-only ${{ steps.capture_os_sha.outputs.sha }}~1 ${{ steps.capture_os_sha.outputs.sha }} > changed_files.txt
          echo "==== DEBUG changed_files.txt ===="
          cat changed_files.txt
          os_chamber=$(grep -oE 'tn[0-9]+' changed_files.txt | head -n1 || true)
          echo "os_chamber=$os_chamber" >> $GITHUB_OUTPUT
          list=$(cat changed_files.txt | tr '\n' ',')
          echo "added=$list" >> $GITHUB_ENV

      # ----- Save cache -----
      - name: Save changed files cache
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      # ----- Debug final outputs -----
      - name: Debug final outputs
        run: |
          echo "Captured OpenStack SHA (os_sha): ${{ steps.capture_os_sha.outputs.sha }}"
          echo "os_chamber detected: ${{ steps.generate_cc_changed_files.outputs.os_chamber }}"


























0s
Run actions/download-artifact@v3
Starting download for openstack-changed-files
Error: Unable to find any artifacts for the associated workflow
0s
Run if [ -f "terraform-cadencecld-openstack/changed_files.txt" ]; then
  
0s
Run cd terraform-cadencecld-openstack
CustomerVPC/terraform/config/envs/non-prod/qa/test-1/tn03/delete_chamber
1s
Run actions/upload-artifact@v3
  
With the provided path, there will be 1 file uploaded
Starting artifact upload
For more detailed logs during the artifact upload process, enable step-debugging: https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging
Artifact name is valid!
Container for artifact "openstack-changed-files" successfully created. Starting upload of file(s)
Total size of all the files uploaded is 73 bytes
File upload process has finished. Finalizing the artifact upload
Artifact has been finalized. All files have been successfully uploaded!

The raw size of all the files that were specified for upload is 73 bytes
The size of all the files that were uploaded is 73 bytes. This takes into account any gzip compression used to reduce the upload size, time and storage

Note: The size of downloaded zips can differ significantly from the reported size. For more information see: https://github.com/actions/upload-artifact#zipped-artifact-downloads 

Artifact openstack-changed-files has been successfully uploaded!









jobs:
  pre_chamber_deployment:
    runs-on: cloud30-docker-mvp
    outputs:
      rname: ${{ steps.step1.outputs.ccid }}
      cc_chamber_chdir: ${{ steps.step2.outputs.cc_chamber_path }}
      cc_changed_files: ${{ steps.step2.outputs.cc_added_files }}
      env_name: ${{ steps.step2.outputs.en_name }}
      cc_id: ${{ steps.step1.outputs.cc_chamber_id }}
      commit_sha: ${{ steps.commit_sha.outputs.sha }}
      os_chamber: ${{ steps.ccfiles.outputs.os_chamber }}
      os_sha: ${{ steps.os_sha.outputs.sha }}
    steps:
      - name: Checkout AWS repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }}

      - name: Output AWS current SHA
        id: commit_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Checkout OnCloud IaC Actions
        uses: actions/checkout@v3
        with:
          repository: IT/OnCloud_IaC_Github_Actions
          path: OnCloud_IaC_Github_Actions
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Setup Git Credentials
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
        with:
          credentials: ${{ secrets.GIT_CREDENTIALS }}

      - name: Checkout OpenStack repo
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: Release_test

      - name: Get OpenStack SHA
        id: os_sha
        run: |
          cd terraform-cadencecld-openstack
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # Try to download previous artifact first
      - name: Download changed_files.txt from previous run
        id: download_changed_files
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: openstack-changed-files
          path: terraform-cadencecld-openstack

      # Check if the file exists after download
      - name: Check if changed_files.txt exists
        id: check_changed_file
        run: |
          if [ -f "terraform-cadencecld-openstack/changed_files.txt" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # Generate only if artifact not found
      - name: Generate CC changed files
        id: ccfiles
        if: steps.check_changed_file.outputs.exists == 'false'
        run: |
          cd terraform-cadencecld-openstack
          git diff --name-only HEAD~1..HEAD > changed_files.txt
          cat changed_files.txt
          os_chamber=$(grep -oE 'tn[0-9]+' changed_files.txt | head -n1)
          echo "os_chamber=$os_chamber" >> $GITHUB_OUTPUT
          list=$(cat changed_files.txt | tr '\n' ',')
          echo "added=$list" >> $GITHUB_ENV

      # Upload artifact only if we generated it
      - name: Upload changed_files.txt artifact
        if: steps.check_changed_file.outputs.exists == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: openstack-changed-files
          path: terraform-cadencecld-openstack/changed_files.txt

      - name: Debug os_chamber
        run: echo "os_chamber=${{ steps.ccfiles.outputs.os_chamber }}"

      # ... your existing AWS file detection, step1/step2, and validation follow ...
















0s
0s
0s
Run aws_cc_chamber="tn07"
AWS cc_chamber: tn07
OpenStack chamber: tn03
MISMATCH: AWS expects 'tn07' but OpenStack has 'tn03'
Error: Process completed with exit code 1.


-aws_chamber_deployment:
  needs: pre_chamber_deployment
  steps:
    - name: Checkout AWS repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.REPO_TOKEN }}
        ref: ${{ needs.pre_chamber_deployment.outputs.commit_sha }}  # ✅ pinned

openstack_chamber_deployment:
  needs: pre_chamber_deployment
  steps:
    - name: Checkout OpenStack repo
      uses: actions/checkout@v3
      with:
        repository: IT/terraform-cadencecld-openstack
        path: terraform-cadencecld-openstack
        token: ${{ secrets.REPO_TOKEN }}
        fetch-depth: 0
        ref: ${{ needs.pre_chamber_deployment.outputs.os_sha }}      # ✅ pinned




jobs:
  pre_chamber_deployment:
    runs-on: cloud30-docker-mvp
    outputs:
      rname: ${{ steps.step1.outputs.ccid }}
      cc_chamber_chdir: ${{ steps.step2.outputs.cc_chamber_path }}
      cc_changed_files: ${{ steps.step2.outputs.cc_added_files }}
      env_name: ${{ steps.step2.outputs.en_name }}
      cc_id: ${{ steps.step1.outputs.cc_chamber_id }}
      commit_sha: ${{ steps.commit_sha.outputs.sha }}
      os_chamber: ${{ steps.ccfiles.outputs.os_chamber }}
      os_sha: ${{ steps.os_sha.outputs.sha }}   # ✅ captured OpenStack SHA
    steps:

      # -------------------------
      # Checkout AWS repo (this repo)
      # -------------------------
      - name: Checkout AWS repo (this repo)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }}

      - name: Output AWS current SHA
        id: commit_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      # -------------------------
      # Checkout helper repo
      # -------------------------
      - name: Checkout OnCloud IaC Actions
        uses: actions/checkout@v3
        with:
          repository: IT/OnCloud_IaC_Github_Actions
          path: OnCloud_IaC_Github_Actions
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Setup Git Credentials
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
        with:
          credentials: ${{ secrets.GIT_CREDENTIALS }}

      # -------------------------
      # Checkout OpenStack repo
      # -------------------------
      - name: Checkout OpenStack repo
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: Release_test  # the branch you want to track

      # ✅ Capture OpenStack SHA to lock this run
      - name: Get OpenStack SHA
        id: os_sha
        run: |
          cd terraform-cadencecld-openstack
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # -------------------------
      # Debug checkouts
      # -------------------------
      - name: Debug AWS repo files
        run: |
          echo "AWS repo SHA: ${{ github.sha }}"
          ls -R CustomerVPC/terraform/config/envs

      - name: Debug OpenStack repo files
        run: |
          cd terraform-cadencecld-openstack
          echo "OpenStack SHA:"
          git rev-parse HEAD
          ls -R

      # -------------------------
      # Restore cache
      # -------------------------
      - name: Restore changed files cache
        id: cache-cc-changed-files
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/cache/restore
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      # -------------------------
      # Generate changed files if cache not found
      # -------------------------
      - name: Generate CC changed files if cache not found
        id: ccfiles
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        run: |
          cd ./terraform-cadencecld-openstack
          git diff --name-only HEAD~1..HEAD > changed_files.txt
          cat changed_files.txt
          os_chamber=$(grep -oE 'tn[0-9]+' changed_files.txt | head -n1)
          echo "os_chamber=$os_chamber" >> $GITHUB_OUTPUT
          list=$(cat changed_files.txt | tr '\n' ',')
          echo "added=$list" >> $GITHUB_ENV

      - name: Save changed files cache
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/cache/save
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      - name: Debug os_chamber
        run: echo "Debug os_chamber=${{ steps.ccfiles.outputs.os_chamber }}"

      # -------------------------
      # Get AWS changed files
      # -------------------------
      - name: Get AWS changed files
        id: files
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/gh-action-get-changed-files-master
        with:
          token: ${{ secrets.REPO_TOKEN }}

      # -------------------------
      # Parse added/modified paths for AWS & OpenStack
      # -------------------------
      - name: AWS files were added
        if: ${{ contains(steps.files.outputs.added, '*.tfvars.json') || contains(steps.files.outputs.added, 'add_chamber') || contains(steps.files.outputs.added, 'delete_chamber') }}
        run: |
          echo "chdir=$(echo "${{ steps.files.outputs.added }}" | tr -d [] | awk 'BEGIN{FS=OFS=","} {for(i=1;i<=NF;i++) if ($i ~/add_chamber$/ || $i ~/delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-7 )" >> $GITHUB_ENV

      - name: AWS files were modified
        if: ${{ contains(steps.files.outputs.modified, '*.tfvars.json') || contains(steps.files.outputs.modified, 'add_chamber') || contains(steps.files.outputs.modified, 'delete_chamber') }}
        run: |
          echo "chdir=$(echo "${{ steps.files.outputs.modified }}" | tr -d [] | awk 'BEGIN{FS=OFS=","} {for(i=1;i<=NF;i++) if ($i ~/add_chamber$/ || $i ~/delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-7 )" >> $GITHUB_ENV

      - name: CC files were added or modified
        if: ${{ contains(env.added, '*.tfvars.json') || contains(env.added, 'add_chamber') || contains(env.added, 'delete_chamber') }}
        run: |
          echo "cc_chdir=$(echo "${{ env.added }}" | tr -d ' ' | awk -v FS=',' '{for(i=1;i<=NF;i++) if ($i ~ /add_chamber$/ || $i ~ /delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-8 )" >> $GITHUB_ENV

      # -------------------------
      # Extract info from AWS tfvars
      # -------------------------
      - id: step1
        if: ${{ env.chdir != '' }}
        run: |
          cd ${{ github.workspace }}/CustomerVPC/terraform/config/envs/${{ env.chdir }}
          env_file=$(ls *.tfvars.json | grep -E '^[a-zA-Z]+[0-9]+\.tfvars\.json$')
          echo "Found TF var json file: $env_file"
          deploy_type=$(jq -r '.settings.deployment_type' $env_file)
          cc_ch=$(jq -r '.settings.cc_chamber' $env_file)
          cc_env_val=$(jq -r '.settings.cc_env' $env_file)
          tag_env=$(jq -r '.tags.Environment' $env_file)
          echo "depoy_env=$tag_env" >> $GITHUB_ENV
          echo "cc_env_value=$( [ \"$tag_env\" = \"Production\" ] && echo "prod" || echo "non-prod" )" >> $GITHUB_ENV
          echo "cc_cham=$cc_ch" >> $GITHUB_ENV
          echo "cc_env=$cc_env_val" >> $GITHUB_ENV
          echo "ccid=$deploy_type" >> $GITHUB_OUTPUT
          echo "cc_chamber_id=$cc_ch" >> $GITHUB_OUTPUT

      - name: Debug cc_chamber_id
        run: echo "Debug cc_chamber_id=${{ steps.step1.outputs.cc_chamber_id }}"

      # -------------------------
      # Output environment info
      # -------------------------
      - id: step2
        if: ${{ env.cc_chdir != '' }}
        run: |
          echo "cc_chamber_path=$cc_chdir" >> $GITHUB_OUTPUT
          echo "cc_added_files=$added" >> $GITHUB_OUTPUT
          env_field=$(echo "$cc_chdir" | cut -d '/' -f 2)
          env_osc=$(echo "$cc_chdir" | cut -d '/' -f 3)
          if [ "$env_field" == "qa" ]; then
            echo "en_name=test" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "dev" ]]; then
            echo "en_name=dev" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "stage" ]]; then
            echo "en_name=stage" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "prod" && "$env_osc" == "prod-1" ]]; then
            echo "en_name=prod" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "prod" && "$env_osc" == "prod-2" ]]; then
            echo "en_name=prod2" >> "$GITHUB_OUTPUT"
          else
            echo "no env details found"
          fi

      # -------------------------
      # Validate chambers match
      # -------------------------
      - name: Validate cc_chamber match between AWS tfvars and OpenStack
        if: ${{ steps.step1.outputs.cc_chamber_id != '' && steps.ccfiles.outputs.os_chamber != '' }}
        run: |
          aws_cc_chamber="${{ steps.step1.outputs.cc_chamber_id }}"
          os_chamber="${{ steps.ccfiles.outputs.os_chamber }}"
          echo "AWS cc_chamber: $aws_cc_chamber"
          echo "OpenStack chamber: $os_chamber"
          if [[ "$aws_cc_chamber" != "$os_chamber" ]]; then
            echo "MISMATCH: AWS expects '$aws_cc_chamber' but OpenStack has '$os_chamber'"
            exit 1
          else
            echo "VALID: Chambers match - '$aws_cc_chamber'"
          fi























name: Terragrunt CLI flow
on:
  push:
    branches:
      - Release_test
    paths:
      - 'CustomerVPC/terraform/config/envs/*prod/*/**'
  workflow_dispatch:

jobs:
  pre_chamber_deployment:
    runs-on: cloud30-docker-mvp
    outputs:
      rname: ${{ steps.step1.outputs.ccid }}
      cc_chamber_chdir: ${{ steps.step2.outputs.cc_chamber_path }}
      cc_changed_files: ${{ steps.step2.outputs.cc_added_files }}
      env_name: ${{ steps.step2.outputs.en_name }}
      cc_id: ${{ steps.step1.outputs.cc_chamber_id }}
      commit_sha: ${{ steps.commit_sha.outputs.sha }}
      os_chamber: ${{ steps.ccfiles.outputs.os_chamber }}
    steps:

      # Checkout THIS repo (AWS related)
      - name: Checkout AWS repo (this repo)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_TOKEN }}

      - name: Output current SHA
        id: commit_sha
        run: echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      # Checkout helper repo
      - name: Checkout OnCloud IaC Actions
        uses: actions/checkout@v3
        with:
          repository: IT/OnCloud_IaC_Github_Actions
          path: OnCloud_IaC_Github_Actions
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0

      - name: Setup Git Credentials
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
        with:
          credentials: ${{ secrets.GIT_CREDENTIALS }}

      # Checkout OpenStack repo
      # NOTE: previously you hardcoded ref: Release_test
      # If you want exact SHA, pass it as an input or set it in portal.
      - name: Checkout OpenStack repo
        uses: actions/checkout@v3
        with:
          repository: IT/terraform-cadencecld-openstack
          path: terraform-cadencecld-openstack
          token: ${{ secrets.REPO_TOKEN }}
          fetch-depth: 0
          ref: Release_test   # or dynamically pass the SHA for that repo

      - name: Debug AWS repo files
        run: |
          echo "AWS repo SHA: ${{ github.sha }}"
          ls -R CustomerVPC/terraform/config/envs
      - name: Debug OpenStack repo files
        run: |
          cd terraform-cadencecld-openstack
          git rev-parse HEAD
          ls -R

      # Restore cache based on SHA
      - name: Restore changed files cache
        id: cache-cc-changed-files
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/cache/restore
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      # Generate changed files if cache not found
      - name: Generate CC changed files if cache not found
        id: ccfiles
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        run: |
          cd ./terraform-cadencecld-openstack
          git diff --name-only HEAD~1..HEAD > changed_files.txt
          cat changed_files.txt
          os_chamber=$(grep -oE 'tn[0-9]+' changed_files.txt | head -n1)
          echo "os_chamber=$os_chamber" >> $GITHUB_OUTPUT
          list=$(cat changed_files.txt | tr '\n' ',')
          echo "added=$list" >> $GITHUB_ENV

      - name: Save changed files cache
        if: steps.cache-cc-changed-files.outputs.cache-hit != 'true'
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/cache/save
        with:
          path: ./terraform-cadencecld-openstack/changed_files.txt
          key: cc-changed-files-${{ github.sha }}

      - name: Debug os_chamber
        run: echo "Debug os_chamber=${{ steps.ccfiles.outputs.os_chamber }}"

      - name: Get AWS changed files
        id: files
        uses: ./OnCloud_IaC_Github_Actions/.github/actions/gh-action-get-changed-files-master
        with:
          token: ${{ secrets.REPO_TOKEN }}

      # Detect added/modified files for AWS and OpenStack
      - name: AWS files were added
        if: ${{ contains(steps.files.outputs.added, '*.tfvars.json') || contains(steps.files.outputs.added, 'add_chamber') || contains(steps.files.outputs.added, 'delete_chamber') }}
        run: |
          echo "chdir=$(echo "${{ steps.files.outputs.added }}" | tr -d [] | awk 'BEGIN{FS=OFS=","} {for(i=1;i<=NF;i++) if ($i ~/add_chamber$/ || $i ~/delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-7 )" >> $GITHUB_ENV

      - name: AWS files were modified
        if: ${{ contains(steps.files.outputs.modified, '*.tfvars.json') || contains(steps.files.outputs.modified, 'add_chamber') || contains(steps.files.outputs.modified, 'delete_chamber') }}
        run: |
          echo "chdir=$(echo "${{ steps.files.outputs.modified }}" | tr -d [] | awk 'BEGIN{FS=OFS=","} {for(i=1;i<=NF;i++) if ($i ~/add_chamber$/ || $i ~/delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-7 )" >> $GITHUB_ENV

      - name: CC files were added or modified
        if: ${{ contains(env.added, '*.tfvars.json') || contains(env.added, 'add_chamber') || contains(env.added, 'delete_chamber') }}
        run: |
          echo "cc_chdir=$(echo "${{ env.added }}" | tr -d ' ' | awk -v FS=',' '{for(i=1;i<=NF;i++) if ($i ~ /add_chamber$/ || $i ~ /delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-8 )" >> $GITHUB_ENV

      - id: step1
        if: ${{ env.chdir != '' }}
        run: |
          cd ${{ github.workspace }}/CustomerVPC/terraform/config/envs/${{ env.chdir }}
          env_file=$(ls *.tfvars.json | grep -E '^[a-zA-Z]+[0-9]+\.tfvars\.json$')
          echo "Found TF var json file: $env_file"
          deploy_type=$(jq -r '.settings.deployment_type' $env_file)
          cc_ch=$(jq -r '.settings.cc_chamber' $env_file)
          cc_env_val=$(jq -r '.settings.cc_env' $env_file)
          tag_env=$(jq -r '.tags.Environment' $env_file)
          echo "depoy_env=$tag_env" >> $GITHUB_ENV
          echo "cc_env_value=$( [ \"$tag_env\" = \"Production\" ] && echo "prod" || echo "non-prod" )" >> $GITHUB_ENV
          echo "cc_cham=$cc_ch" >> $GITHUB_ENV
          echo "cc_env=$cc_env_val" >> $GITHUB_ENV
          echo "ccid=$deploy_type" >> $GITHUB_OUTPUT
          echo "cc_chamber_id=$cc_ch" >> $GITHUB_OUTPUT

      - name: Debug cc_chamber_id
        run: echo "Debug cc_chamber_id=${{ steps.step1.outputs.cc_chamber_id }}"

      - id: step2
        if: ${{ env.cc_chdir != '' }}
        run: |
          echo "cc_chamber_path=$cc_chdir" >> $GITHUB_OUTPUT
          echo "cc_added_files=$added" >> $GITHUB_OUTPUT
          env_field=$(echo "$cc_chdir" | cut -d '/' -f 2)
          env_osc=$(echo "$cc_chdir" | cut -d '/' -f 3)
          if [ "$env_field" == "qa" ]; then
            echo "en_name=test" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "dev" ]]; then
            echo "en_name=dev" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "stage" ]]; then
            echo "en_name=stage" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "prod" && "$env_osc" == "prod-1" ]]; then
            echo "en_name=prod" >> "$GITHUB_OUTPUT"
          elif [[ "$env_field" == "prod" && "$env_osc" == "prod-2" ]]; then
            echo "en_name=prod2" >> "$GITHUB_OUTPUT"
          else
            echo "no env details found"
          fi

      - name: Validate cc_chamber match between AWS tfvars and OpenStack
        if: ${{ steps.step1.outputs.cc_chamber_id != '' && steps.ccfiles.outputs.os_chamber != '' }}
        run: |
          aws_cc_chamber="${{ steps.step1.outputs.cc_chamber_id }}"
          os_chamber="${{ steps.ccfiles.outputs.os_chamber }}"
          echo "AWS cc_chamber: $aws_cc_chamber"
          echo "OpenStack chamber: $os_chamber"
          if [[ "$aws_cc_chamber" != "$os_chamber" ]]; then
            echo "MISMATCH: AWS expects '$aws_cc_chamber' but OpenStack has '$os_chamber'"
            exit 1
          else
            echo "VALID: Chambers match - '$aws_cc_chamber'"
          fi

    
  aws_chamber_deployment:
    runs-on: cloud30-docker-mvp
    needs: pre_chamber_deployment
    if: ${{ needs.pre_chamber_deployment.outputs.rname == 'mvp-cc' || needs.pre_chamber_deployment.outputs.rname == 'mvp' }} 
    outputs:
      del_chamber_path: ${{ steps.step1.outputs.aws_del_chamber }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.REPO_TOKEN }}
    
   
    - name: Checkout the files
      uses: actions/checkout@v3
      with:
        repository: IT/OnCloud_IaC_Github_Actions
        path: ./OnCloud_IaC_Github_Actions
        token: ${{ secrets.REPO_TOKEN }}
  
    - name: Setup Git Credentials
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
      with:
        credentials: ${{ secrets.GIT_CREDENTIALS }}

    - name: Get changed files
      id: files
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/gh-action-get-changed-files-master
      with:          
        token: ${{ secrets.REPO_TOKEN }}
   
    - name: files were added
      if: ${{ contains(steps.files.outputs.added, '*.tfvars.json') || contains(steps.files.outputs.added, 'add_chamber') || contains(steps.files.outputs.added, 'delete_chamber') }}
      run: |
        echo "chdir=$(echo "${{ steps.files.outputs.added }}" | tr -d [] | awk 'BEGIN{FS=OFS=","} {for(i=1;i<=NF;i++) if ($i ~/add_chamber$/ || $i ~/delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-7 )" >> $GITHUB_ENV
        
    - name:  files was modified
      if: ${{ contains(steps.files.outputs.modified, '*.tfvars.json') || contains(steps.files.outputs.modified, 'add_chamber') || contains(steps.files.outputs.modified, 'delete_chamber') }} 
      run: |
        echo "chdir=$(echo "${{ steps.files.outputs.modified }}" | tr -d [] | awk 'BEGIN{FS=OFS=","} {for(i=1;i<=NF;i++) if ($i ~/add_chamber$/ || $i ~/delete_chamber$/) {print $i; exit}}' | cut -d'/' -f 5-7 )" >> $GITHUB_ENV
    - name: Configure AWS credentials
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/configure-aws-credentials-master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Setup Terraform
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-terraform-main
      with:
        terraform_version: 1.5.7

    - name: Terragrunt Plan
      if: ${{ contains(steps.files.outputs.added, 'add_chamber') || contains(steps.files.outputs.modified, 'add_chamber') }}
      run: /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin plan
      working-directory: ${{ github.workspace }}/CustomerVPC/terraform/config/envs/${{ env.chdir }}
    
    # - name: Terragrunt Apply
    #   if: ${{ success() && !(contains(steps.files.outputs.added, 'delete_chamber') || contains(steps.files.outputs.modified, 'delete_chamber'))  && (contains(steps.files.outputs.modified, 'add_chamber') || contains(steps.files.outputs.added, 'add_chamber')) }}
    #   run: /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin apply -auto-approve
    #   working-directory: ${{ github.workspace }}/CustomerVPC/terraform/config/envs/${{ env.chdir }}
   
    # - name: Terragrunt Destroy
    #   if: ${{ needs.pre_chamber_deployment.outputs.rname == 'mvp' && ( contains(steps.files.outputs.added, 'delete_chamber')  || contains(steps.files.outputs.modified, 'delete_chamber') )}} 
    #   run: |
    #     /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin destroy -auto-approve
    #   working-directory: ${{ github.workspace }}/CustomerVPC/terraform/config/envs/${{ env.chdir }}
    
    - id: step1
      if: ${{ needs.pre_chamber_deployment.outputs.rname == 'mvp-cc' && ( contains(steps.files.outputs.added, 'delete_chamber')  || contains(steps.files.outputs.modified, 'delete_chamber') )}} 
      run: |
         del_chdir=$(echo "${{ github.workspace }}/CustomerVPC/terraform/config/envs/${{ env.chdir }}")
         echo "aws_del_chamber=$del_chdir" >> $GITHUB_OUTPUT
 

  openstack_chamber_deployment:
    runs-on: cloud30-docker-mvp 
    needs: [ pre_chamber_deployment,aws_chamber_deployment ]
    if: ${{needs.pre_chamber_deployment.outputs.rname == 'mvp-cc'}}
    environment: ${{needs.pre_chamber_deployment.outputs.env_name}}
    env:
      OS_AUTH_URL: ${{ secrets[format('OS_AUTH_URL_{0}', needs.pre_chamber_deployment.outputs.env_name)] }}
      OS_USERNAME: ${{ secrets[format('OS_USERNAME_{0}', needs.pre_chamber_deployment.outputs.env_name)] }}
      OS_PASSWORD: ${{ secrets[format('OS_PASSWORD_{0}', needs.pre_chamber_deployment.outputs.env_name)] }}
      OS_PROJECT_NAME: ${{ secrets[format('OS_PROJECT_NAME_{0}', needs.pre_chamber_deployment.outputs.env_name)] }}
      OS_USER_DOMAIN_NAME: ${{ secrets[format('OS_USER_DOMAIN_NAME_{0}', needs.pre_chamber_deployment.outputs.env_name)] }}
      OS_COMPUTE_URL: ${{ secrets[format('OS_COMPUTE_URL_{0}', needs.pre_chamber_deployment.outputs.env_name)] }}
      cc_id: ${{ needs.pre_chamber_deployment.outputs.cc_id }}
      TF_CLI_CONFIG_FILE: ${{ secrets.TF_CLI_CONFIG_FILE }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.REPO_TOKEN }}
   
    - name: Checkout the files
      uses: actions/checkout@v3
      with:
        repository: IT/OnCloud_IaC_Github_Actions
        path: ./OnCloud_IaC_Github_Actions
        token: ${{ secrets.REPO_TOKEN }}

    - name: Setup Git Credentials
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-git-credentials
      with:
        credentials: ${{ secrets.GIT_CREDENTIALS }}

    - name: Configure AWS credentials
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/configure-aws-credentials-master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Checkout the files
      uses: actions/checkout@v3
      with:
        repository: IT/terraform-cadencecld-openstack
        path: ./terraform-cadencecld-openstack
        token: ${{ secrets.REPO_TOKEN }} 
        fetch-depth: 0    
        ref: Release_test
    
        
    - name: Setup Terraform
      uses: ./OnCloud_IaC_Github_Actions/.github/actions/setup-terraform-main
      with:
        terraform_version: 1.5.7

    - name: Terragrunt Plan
      if: ${{ contains(needs.pre_chamber_deployment.outputs.cc_changed_files, 'add_chamber') }}
      run: /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin plan
      working-directory: ./terraform-cadencecld-openstack/CustomerVPC/terraform/config/envs/${{ needs.pre_chamber_deployment.outputs.cc_chamber_chdir }}
    
     
    # - name: Terragrunt Apply
    #   id: tf_apply
    #   continue-on-error: true
    #   if: ${{ success() &&  !contains(needs.pre_chamber_deployment.outputs.cc_changed_files, 'delete_chamber')  && contains(needs.pre_chamber_deployment.outputs.cc_changed_files, 'add_chamber') }}
    #   run: /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin apply -auto-approve
    #   working-directory: ./terraform-cadencecld-openstack/CustomerVPC/terraform/config/envs//${{ needs.pre_chamber_deployment.outputs.cc_chamber_chdir }}
    
  #  # - name: Wait for OpenStack VMs Reboot Approval
  #  #   uses: ./OnCloud_IaC_Github_Actions/.github/actions/approval-action-main
  #  #   with:
  #  #     approvers: "srinip"
  #  #     token: ${{ secrets.REPO_TOKEN }}
  #  #     issueTitle: "tf approval"
  #  #     issueBody: "Tf approval request pending"
  #  #     approveWords: 'apply,approve, approved,destroy'
  #  #     rejectWords: 'deny, denied, reject, rejected'
  #  #     issueLabels: 'ManualApproval,ApprovalAction'
  #  #     waitInterval: '1'
  #  #     waitTimeout: '60'
  #  #     minimumApprovals: '1'
    
    # - name: Reboot VMs
    #   id: reboot_vm
    #   if: ${{ steps.tf_apply.outcome == 'failure' }}
    #   run: |
    #       json_auth_data='{
    #         "auth":{
    #           "identity":{
    #              "methods":["password"],
    #              "password": { 
    #                "user": { 
    #                  "name": "${{ env.OS_USERNAME }}", 
    #                  "domain": { "id": "default" }, 
    #                  "password": "${{ env.OS_PASSWORD }}"
    #                }
    #              }
    #           }
    #         }
    #       }'
    #       OS_AUTH_TOKEN=$(curl -is -X POST -H "Content-Type: application/json" ${{ env.OS_AUTH_URL }}/v3/auth/tokens \
    #        -d "$json_auth_data" | grep -i '^x-subject-token' | cut -d' ' -f2 | tr -d '\r')
    #       vm_list=$(curl -s -X GET -H "X-Auth-Token: $OS_AUTH_TOKEN"  -H "Content-Type: application/json" \
    #        "${{ env.OS_COMPUTE_URL }}/servers?all_tenants=True&name=${{ env.cc_id }}" | jq -r '.servers[] | .id')
    #       echo "vm_list= $vm_list"
    #       vm_list_count=`echo -e $vm_list | tr ' ' '\n' | wc -l | xargs`
    #       json_data='{
    #         "reboot":{
    #           "type":"HARD"
    #         }
    #       }'
    #       echo "json_date=$json_data"
    #       echo -e $vm_list | tr ' ' '\n' | while read i; do curl -s -X POST -H "X-Auth-Token: $OS_AUTH_TOKEN" \
    #        -H "Content-Type: application/json" "${{ env.OS_COMPUTE_URL }}/servers/$i/action" \
    #        -d "$json_data"; echo "$i is rebooted"; done
    #       vm_running=0
    #       echo "vm_running = $vm_running, vm_list_count=$vm_list_count"
    #       while [ "$vm_running" != "$vm_list_count" ]; do
    #         echo "wait....60 seconds"
    #         sleep 60
    #         vm_running=$(curl -s -X GET -H "X-Auth-Token: $OS_AUTH_TOKEN"  -H "Content-Type: application/json" \
    #           "${{ env.OS_COMPUTE_URL }}/servers?all_tenants=True&name=${{ env.cc_id }}&status=ACTIVE" \
    #           | jq '.servers | length')
    #         echo "vm_running = $vm_running, vm_list_count=$vm_list_count"
    #       done
    #   working-directory: ./terraform-cadencecld-openstack/CustomerVPC/terraform/config/envs/${{ needs.pre_chamber_deployment.outputs.cc_chamber_chdir }}
        
    # - name: Terragrunt Apply - Second
    #   if: ${{ steps.tf_apply.outcome == 'failure' }}
    #   run: /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin apply -auto-approve
    #   working-directory: ./terraform-cadencecld-openstack/CustomerVPC/terraform/config/envs//${{ needs.pre_chamber_deployment.outputs.cc_chamber_chdir }}
    
    # - name: Terragrunt CC Destroy
    #   if: ${{ contains(needs.pre_chamber_deployment.outputs.cc_changed_files, 'delete_chamber') }}
    #   run: |
    #     /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin destroy -auto-approve
    #   working-directory: ./terraform-cadencecld-openstack/CustomerVPC/terraform/config/envs//${{ needs.pre_chamber_deployment.outputs.cc_chamber_chdir }}
    
    # - name: Terragrunt AWS Destroy
    #   if: ${{ needs.aws_chamber_deployment.outputs.del_chamber_path != '' }}
    #   run: |
    #     /gh-runner/bin/terragrunt --terragrunt-tfpath ${{ env.TERRAFORM_CLI_PATH }}/terraform-bin destroy -auto-approve
    #   working-directory: ${{ needs.aws_chamber_deployment.outputs.del_chamber_path }}
    # #  Commented out for the time, Since this only work for c4 account. Will enhance this logic
    # # - name: Terragrunt AWS Post Destroy
    # #   if: ${{ needs.aws_chamber_deployment.outputs.del_chamber_path != '' }}
    # #   run: |
    # #     cd ${{ needs.aws_chamber_deployment.outputs.del_chamber_path }}
    # #     env_file=$(ls *.tfvars.json | grep -E '^[a-zA-Z]+[0-9]+\.tfvars\.json$')
    # #     echo "Found TF var json file: $env_file"
    # #     del_reg=$(jq -r '.region' $env_file)
    # #     del_env_name=$([[ "$(echo "${{ needs.aws_chamber_deployment.outputs.del_chamber_path }}" | cut -d "/" -f10)" == "non-prod" ]] && echo "dev" || echo "prod")
    # #     bucket_prefix=$([[ "$(echo "${{ needs.aws_chamber_deployment.outputs.del_chamber_path }}" | cut -d "/" -f10)" == "non-prod" ]] && echo "-dev" || echo "")
    # #     del_ch_json=$(echo "${{ needs.aws_chamber_deployment.outputs.del_chamber_path }}" | cut -d "/" -f12)
    # #     del_ch_name=$(echo "${{ needs.aws_chamber_deployment.outputs.del_chamber_path }}" | cut -d "/" -f12 |cut -c1-2)

    # #     # Retrieve the object's size

    # #     ##object_size=$(aws s3api head-object --bucket "cadencecloud-${del_env_name}-${del_reg}" --key "c30-${del_env_name}/${del_ch_name}/${del_ch_json}.json" --query 'ContentLength' --output text)
    # #     object_size=$(aws s3api head-object --bucket "cadencecloud-${del_env_name}-${del_reg}" --key "c30-${del_env_name}/${del_ch_name}/${del_ch_json}.json" --region "${del_reg}" --query 'ContentLength' --output text) || echo "Error: unable to retrieve object size"


    # #     # Check if the object size is zero
    # #     if [ "$object_size" -eq 0 ]; then
    # #         echo "Object ${del_ch_json}.json has zero size, skipping deletion."
    # #     else
    # #         # If the object size is not zero, delete it
    # #         aws s3 rm "s3://cadencecloud${bucket_prefix}-${del_reg}/c30-${del_env_name}/${del_ch_name}/${del_ch_json}.json" --region "${del_reg}"
    # #         echo "s3://cadencecloud${bucket_prefix}-${del_reg}/c30-${del_env_name}/${del_ch_name}/${del_ch_json}.json"
    # #     fi

    # #     sleep 180
    # #     echo "${del_ch_json}vpc_flow_log_cloudwatch_group"
    # #     aws logs delete-log-group --log-group-name ${del_ch_json}vpc_flow_log_cloudwatch_group --region "${del_reg}"





ChatGPT said:
Sure. Here's the plain text version of the Jira comment you can copy and paste directly:

Hi team,

To ensure consistent and high-quality pull requests, we have implemented a new GitHub Actions-based PR Checklist and Reviewer Validation Workflow.

This workflow enforces key contribution standards:

PRs must include a completed checklist using "- [x]"

At least one reviewer (user or team) must be assigned

It runs when a PR is opened, edited (title or body), reopened, updated with new commits, or when reviewers are requested

If any requirement is missing, the workflow fails and posts a comment on the PR

This workflow is integrated with CODEOWNERS and GitHub branch protection rules to enforce peer review and quality control across all repositories and branches.

You can find the full documentation at the link below:

PR Checklist & Reviewer Validation Workflow Documentation: [INSERT LINK HERE]

Let me know if you have any questions or feedback.







name: Strict PR Validator (Internal Only)

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - review_requested
      - edited

concurrency:
  group: pr-validator-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate-pr:
    runs-on: ubuntu-latest

    # Only re-run for meaningful edits (title or body changes)
    if: |
      github.event.action == 'opened' ||
      github.event.action == 'reopened' ||
      github.event.action == 'synchronize' ||
      github.event.action == 'review_requested' ||
      (
        github.event.action == 'edited' &&
        (
          github.event.changes.title ||
          github.event.changes.body
        )
      )

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch PR Metadata
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: Bearer $GH_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
               -o pr.json

      - name: Validate PR Fields
        id: validation
        run: |
          echo "status=success" >> $GITHUB_OUTPUT
          errors=""

          title=$(jq -r .title pr.json)
          if [[ ! "$title" =~ ^JIRA-[0-9]+:\  ]]; then
            errors+="PR title must follow format: JIRA-123: Summary of change\n"
          fi

          body=$(jq -r .body pr.json)
          echo "$body" > body.txt

          if ! grep -q "## What is being done in this PR?" body.txt; then
            errors+="Missing section: 'What is being done in this PR?'\n"
          fi

          if ! grep -qi "\- \[x\]" body.txt; then
            errors+="Checklist is not completed. At least one item must be checked.\n"
          fi

          reviewers=$(jq '.requested_reviewers | length' pr.json)
          team_reviewers=$(jq '.requested_teams | length' pr.json)
          if [ "$reviewers" -eq 0 ] && [ "$team_reviewers" -eq 0 ]; then
            errors+="At least one reviewer or team must be assigned.\n"
          fi

          if [ -n "$errors" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "$errors" > summary.txt
            exit 1
          else
            echo "All validations passed." > summary.txt
          fi

      - name: Post PR Comment with Validation Summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          body="Validation Summary for PR #${{ github.event.pull_request.number }}\n\n$(cat summary.txt)"
          curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -d "$(jq -nc --arg body "$body" '{body: $body}')"

























#!/bin/bash

# Step 1: Setup test directories
mkdir -p test/aws_tfvars
mkdir -p test/terraform-cadencecld-openstack

# Step 2: Create a mock AWS tfvars file
cat > test/aws_tfvars/aw71.tfvars.json <<EOF
{
  "tags": {
    "Environment": "Production"
  },
  "settings": {
    "deployment_type": "some-type",
    "cc_chamber": "oa41",
    "cc_env": "prod"
  }
}
EOF

# Step 3: Create a mock changed_files.txt from OpenStack
cat > test/terraform-cadencecld-openstack/changed_files.txt <<EOF
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41.tfvars.json
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/add_chamberfirst
EOF

# Step 4: Read and extract cc_chamber from AWS tfvars
env_file="test/aws_tfvars/aw71.tfvars.json"
aws_cc_chamber=$(jq -r '.settings.cc_chamber' "$env_file")
echo "AWS cc_chamber from tfvars: $aws_cc_chamber"

# Step 5: Read and extract OA chamber from changed_files.txt
cc_file="test/terraform-cadencecld-openstack/changed_files.txt"
os_chamber=$(grep -oE 'oa[0-9]+' "$cc_file" | head -n1)
echo "OpenStack chamber from changed_files.txt: $os_chamber"

# Step 6: Compare and validate
if [[ "$aws_cc_chamber" != "$os_chamber" ]]; then
  echo "ERROR: Mismatch - AWS tfvars expects '$aws_cc_chamber' but OpenStack changes show '$os_chamber'"
  exit 1
else
  echo "SUCCESS: Valid match - '$aws_cc_chamber'"
fi


 chmod +x test_cc_chamber_validation.sh
./test_cc_chamber_validation.sh



root@LAPTOP-BALF36R8:~# cat yourscript.sh
#!/bin/bash

mkdir -p test/terraform-cadencecld-openstack
cd test/terraform-cadencecld-openstack

cat > changed_files.txt <<EOF
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41.tfvars.json
EOF

cat changed_files.txt

os_chamber=$(grep -oE 'oa[0-9]+' changed_files.txt | head -n1)
echo "Detected OpenStack chamber: $os_chamber"
echo "os_chamber=$os_chamber" >> test_output.txt


 bash yourscript.sh





















 - name: Validate CC Chamber Match Between AWS tfvars and OpenStack changed_files.txt
        if: ${{ steps.step1.outputs.ccch != '' && env.cc_chdir != '' }}
        run: |
            echo "Validating chamber mapping..."
            aws_cc_chamber="${{ steps.step1.outputs.ccch }}"
            echo "AWS tfvars cc_chamber: $aws_cc_chamber"

            cc_file="./terraform-cadencecld-openstack/changed_files.txt"
            if [ ! -f "$cc_file" ]; then
            echo "ERROR: changed_files.txt not found at path: $cc_file"
            exit 1
            fi

          
            os_chamber=$(grep -oE 'oa[0-9]+' "$cc_file" | head -n1)
            echo "Extracted OpenStack chamber from changed_files.txt: $os_chamber"

            if [[ "$aws_cc_chamber" != "$os_chamber" ]]; then
            echo "Mismatch detected:"
            echo "AWS tfvars cc_chamber = '$aws_cc_chamber'"
            echo "OpenStack changed path = '$os_chamber'"
            exit 1
            else
            echo "Match successful: Both AWS and OpenStack indicate chamber '$aws_cc_chamber'"
            fi
