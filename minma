CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/add_chamber
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41-sensitive.tfvars.json
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41.tfvars.json
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/terragrunt.hcl











ChatGPT said:
Sure. Here's the plain text version of the Jira comment you can copy and paste directly:

Hi team,

To ensure consistent and high-quality pull requests, we have implemented a new GitHub Actions-based PR Checklist and Reviewer Validation Workflow.

This workflow enforces key contribution standards:

PRs must include a completed checklist using "- [x]"

At least one reviewer (user or team) must be assigned

It runs when a PR is opened, edited (title or body), reopened, updated with new commits, or when reviewers are requested

If any requirement is missing, the workflow fails and posts a comment on the PR

This workflow is integrated with CODEOWNERS and GitHub branch protection rules to enforce peer review and quality control across all repositories and branches.

You can find the full documentation at the link below:

PR Checklist & Reviewer Validation Workflow Documentation: [INSERT LINK HERE]

Let me know if you have any questions or feedback.







name: Strict PR Validator (Internal Only)

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - review_requested
      - edited

concurrency:
  group: pr-validator-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate-pr:
    runs-on: ubuntu-latest

    # Only re-run for meaningful edits (title or body changes)
    if: |
      github.event.action == 'opened' ||
      github.event.action == 'reopened' ||
      github.event.action == 'synchronize' ||
      github.event.action == 'review_requested' ||
      (
        github.event.action == 'edited' &&
        (
          github.event.changes.title ||
          github.event.changes.body
        )
      )

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch PR Metadata
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: Bearer $GH_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
               -o pr.json

      - name: Validate PR Fields
        id: validation
        run: |
          echo "status=success" >> $GITHUB_OUTPUT
          errors=""

          title=$(jq -r .title pr.json)
          if [[ ! "$title" =~ ^JIRA-[0-9]+:\  ]]; then
            errors+="PR title must follow format: JIRA-123: Summary of change\n"
          fi

          body=$(jq -r .body pr.json)
          echo "$body" > body.txt

          if ! grep -q "## What is being done in this PR?" body.txt; then
            errors+="Missing section: 'What is being done in this PR?'\n"
          fi

          if ! grep -qi "\- \[x\]" body.txt; then
            errors+="Checklist is not completed. At least one item must be checked.\n"
          fi

          reviewers=$(jq '.requested_reviewers | length' pr.json)
          team_reviewers=$(jq '.requested_teams | length' pr.json)
          if [ "$reviewers" -eq 0 ] && [ "$team_reviewers" -eq 0 ]; then
            errors+="At least one reviewer or team must be assigned.\n"
          fi

          if [ -n "$errors" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "$errors" > summary.txt
            exit 1
          else
            echo "All validations passed." > summary.txt
          fi

      - name: Post PR Comment with Validation Summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          body="Validation Summary for PR #${{ github.event.pull_request.number }}\n\n$(cat summary.txt)"
          curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -d "$(jq -nc --arg body "$body" '{body: $body}')"

























#!/bin/bash

# Step 1: Setup test directories
mkdir -p test/aws_tfvars
mkdir -p test/terraform-cadencecld-openstack

# Step 2: Create a mock AWS tfvars file
cat > test/aws_tfvars/aw71.tfvars.json <<EOF
{
  "tags": {
    "Environment": "Production"
  },
  "settings": {
    "deployment_type": "some-type",
    "cc_chamber": "oa41",
    "cc_env": "prod"
  }
}
EOF

# Step 3: Create a mock changed_files.txt from OpenStack
cat > test/terraform-cadencecld-openstack/changed_files.txt <<EOF
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41.tfvars.json
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/add_chamberfirst
EOF

# Step 4: Read and extract cc_chamber from AWS tfvars
env_file="test/aws_tfvars/aw71.tfvars.json"
aws_cc_chamber=$(jq -r '.settings.cc_chamber' "$env_file")
echo "AWS cc_chamber from tfvars: $aws_cc_chamber"

# Step 5: Read and extract OA chamber from changed_files.txt
cc_file="test/terraform-cadencecld-openstack/changed_files.txt"
os_chamber=$(grep -oE 'oa[0-9]+' "$cc_file" | head -n1)
echo "OpenStack chamber from changed_files.txt: $os_chamber"

# Step 6: Compare and validate
if [[ "$aws_cc_chamber" != "$os_chamber" ]]; then
  echo "ERROR: Mismatch - AWS tfvars expects '$aws_cc_chamber' but OpenStack changes show '$os_chamber'"
  exit 1
else
  echo "SUCCESS: Valid match - '$aws_cc_chamber'"
fi


 chmod +x test_cc_chamber_validation.sh
./test_cc_chamber_validation.sh



root@LAPTOP-BALF36R8:~# cat yourscript.sh
#!/bin/bash

mkdir -p test/terraform-cadencecld-openstack
cd test/terraform-cadencecld-openstack

cat > changed_files.txt <<EOF
CustomerVPC/terraform/config/envs/prod/prod/prod-1/oa41/oa41.tfvars.json
EOF

cat changed_files.txt

os_chamber=$(grep -oE 'oa[0-9]+' changed_files.txt | head -n1)
echo "Detected OpenStack chamber: $os_chamber"
echo "os_chamber=$os_chamber" >> test_output.txt


 bash yourscript.sh





















 - name: Validate CC Chamber Match Between AWS tfvars and OpenStack changed_files.txt
        if: ${{ steps.step1.outputs.ccch != '' && env.cc_chdir != '' }}
        run: |
            echo "Validating chamber mapping..."
            aws_cc_chamber="${{ steps.step1.outputs.ccch }}"
            echo "AWS tfvars cc_chamber: $aws_cc_chamber"

            cc_file="./terraform-cadencecld-openstack/changed_files.txt"
            if [ ! -f "$cc_file" ]; then
            echo "ERROR: changed_files.txt not found at path: $cc_file"
            exit 1
            fi

          
            os_chamber=$(grep -oE 'oa[0-9]+' "$cc_file" | head -n1)
            echo "Extracted OpenStack chamber from changed_files.txt: $os_chamber"

            if [[ "$aws_cc_chamber" != "$os_chamber" ]]; then
            echo "Mismatch detected:"
            echo "AWS tfvars cc_chamber = '$aws_cc_chamber'"
            echo "OpenStack changed path = '$os_chamber'"
            exit 1
            else
            echo "Match successful: Both AWS and OpenStack indicate chamber '$aws_cc_chamber'"
            fi
